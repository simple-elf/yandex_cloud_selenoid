name: Yandex Cloud CLI

on: [push]
#on: [fork]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install YandexCloud CLI
        run: curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
      - name: Add YandexCloud CLI to $PATH
        run: echo "/home/runner/yandex-cloud/bin" >> $GITHUB_PATH

#      - name: Check $PATH
#        run: echo $PATH
#      - name: Check YC CLI
#        run: yc -help

      - name: Init YandexCloud CLI - token
        run: yc config set token ${{ secrets.YC_TOKEN }}
      - name: Init YandexCloud CLI - folder-id
        run: yc config set folder-id ${{ secrets.YC_FOLDER_ID }}
      - name: Init YandexCloud CLI - cloud-id
        run: yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
      - run: |
          echo $'\n      -s3-access-key '${{ secrets.S3_ACCESS_KEY }} >> docker-compose.yml
          echo "      -s3-secret-key ${{ secrets.S3_SECRET_KEY }}" >> docker-compose.yml
      - run: cat docker-compose.yml

      - name: Create instance
        id: selenoid_id
        run: echo "::set-output name=INSTANCE_ID::$(./yc-create.sh 2 | jq .id)"
      #- run: echo ${{ steps.selenoid_id.outputs.INSTANCE_ID }}

      - run: yc compute instance get ${{ steps.selenoid_id.outputs.INSTANCE_ID }} --format json
      - name: Get public IP
        id: selenoid
        run: |
          echo "::set-output name=PUBLIC_IP::$( \
          yc compute instance get ${{ steps.selenoid_id.outputs.INSTANCE_ID }} \
          --format json | jq .network_interfaces[0].primary_v4_address.one_to_one_nat.address -r)"

#      - run: |
#          echo $(yc compute instance get ${{ steps.selenoid_id.outputs.INSTANCE_ID }} \
#          --format json | jq .network_interfaces[0].primary_v4_address.address -r)

      - name: Wait for it
        if: always()
        run: |
          ./wait-for-it.sh ${{ steps.selenoid.outputs.PUBLIC_IP }}:4445 \
          -t 180 -s -- echo "Selenoid is up"

      - name: Check status
        if: always()
        run: curl http://${{ steps.selenoid.outputs.PUBLIC_IP }}:4445/status

      - name: Run Tests
        if: always()
        run: ./gradlew test -Dremote=http://${{ steps.selenoid.outputs.PUBLIC_IP }}:4445/wd/hub

      - uses: actions/upload-artifact@master
        if: always()
        with:
          name: report
          path: build/reports/

      - name: Upload allure-results to Allure EE
        uses: simple-elf/allurectl-action@master
        id: allure-ee
        with:
          allure_results: build/allure-results/
          allure_ee_endpoint: ${{ secrets.ALLURE_EE_ENDPOINT }}
          allure_ee_token: ${{ secrets.ALLURE_EE_TOKEN }}
          project_id: ${{ secrets.ALLURE_EE_PROJECT_ID }}

      - name: Delete instance
        if: always()
        run: ./yc-remove.sh ${{ steps.selenoid_id.outputs.INSTANCE_ID }}